(define (domain coininthebox)
  (:requirements :strips :negative-preconditions :mep :no-duplicates)
  (:predicates (opened) (has_key ?ag - agent) (looking ?ag - agent) (tail) (in_room_box ?ag - agent) (in_room_empty ?ag - agent))
 
 
   (:action move_left
	:act_type 	ontic
    :parameters (?ag - agent)
    :precondition (and ([?ag](in_room_empty ?ag)) (in_room_empty ?ag))
    :effect (and (in_room_box) (-in_room_empty))
	:observers (and (forall (?ag2) (ag2)))
  )
  
  (:action move_right
	:act_type 	ontic
    :parameters (?ag - agent)
    :precondition (and ([?ag](in_room_box ?ag)) (in_room_box ?ag))
    :effect (and (in_room_empty) (-in_room_box))
	:observers (and (forall (?ag2) (ag2)))
  )

  (:action open
	:act_type 	ontic
    :parameters (?ag - agent)
    :precondition (and ([?ag](has_key ?ag)) (has_key ?ag) (in_room_box ?ag))
    :effect (opened)
	:observers (and (forall (diff(?ag2)(?ag)) (when (and (looking ?ag2) (in_room_box ?ag2)) (?ag2))) (?ag))
  )

  (:action peek
	:act_type	sensing
    :parameters (?ag - agent)
    :precondition (and ([?ag](opened)) ([?ag](looking ?ag)) (looking ?ag) (opened) (in_room_box ?ag))
    :effect (when (looking ?ag) (tail))
	:observers	(?ag)
	:p_observers (and (forall (diff(?ag2)(?ag)) (when (and (looking ?ag2) (in_room_box ?ag2)) (?ag2))))
	:exp_effect (and (when (looking ?ag2) [?ag2][?ag](or (tail) (!tail))) ([?ag](tail)))
  )
  

  (:action signal
    :parameters (?ag1 ?ag2 - agent)
    :precondition (and ([?ag1](looking ?ag1)) ([?ag2](not (looking ?ag2))) )
    :effect (looking ?ag2)
	:observers (and (forall (diff(?ag3)(?ag2)) (when (looking ?ag3) (?ag3))) (?ag2))
  )

  (:action distract
    :parameters (?ag1 ?ag2 - agent)
    :precondition (and ([?ag1](looking ?ag1)) ([?ag2](looking ?ag2)))
    :effect (not (looking ?ag2))
	:observers (and (forall (diff(?ag3)(?ag2)) (when (looking ?ag3) (?ag3))) (?ag2))
  )
  
  
  (:action announce_room_box
	:act_type	announcement
    :parameters (?ag - agent)
    :precondition (and ([?ag](tail)) (tail) (in_room_box ?ag))
    :effect (tail)
	:observers (and (forall (diff(?ag2)(?ag)) (when (and (looking ?ag2) (in_room_box ?ag2)) (?ag2))) (?ag))
  )
   
  
  (:action announce_room_empty
	:act_type	announcement
    :parameters (?ag - agent)
    :precondition (and ([?ag](tail)) (tail) (in_room_empty ?ag))
    :effect (tail)
	:observers (and (forall (diff(?ag2)(?ag)) (when (and (looking ?ag2) (in_room_empty ?ag2)) (?ag2))) (?ag))
  )
	
)